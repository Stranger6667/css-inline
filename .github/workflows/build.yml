name: ci

on:
  pull_request: {}
  push:
    branches:
      - master
  schedule: [cron: "40 1 * * *"]

jobs:

  commitsar:
    name: Verify commit messages
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Run commitsar
        uses: docker://commitsar/commitsar

  pre-commit:
    name: Generic pre-commit checks
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - run: pip install pre-commit
      - run: SKIP=fmt,cargo-check,clippy pre-commit run --all-files

  test-stable:
    name: Test (stable)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Start background server
        run: |
          python -m pip install flask
          # Starts the server in background
          python ./css-inline/tests/server.py &
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: cargo test --no-fail-fast
        working-directory: ./css-inline

  fmt:
    name: Rustfmt
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - run: cargo fmt --all -- --check
        working-directory: ./css-inline

  clippy:
    name: Clippy
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - run: cargo clippy -- -D warnings
        working-directory: ./css-inline

  msrv:
    name: MSRV
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "1.60"
          override: true
      - run: cargo build
        working-directory: ./css-inline

  test-python:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - run: python -m pip install tox
        working-directory: ./bindings/python

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run ${{ matrix.python }} tox job
        run: tox -e py
        working-directory: ./bindings/python

  test-wasm:
    name: Tests for WASM crate
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install wasm-pack
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: wasm-pack
      - name: Run tests
        run: wasm-pack test --node --release
        working-directory: ./bindings/wasm

  test-wasm-typescript:
    name: TypeScript tests for WASM crate
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install wasm-pack
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: wasm-pack
      - name: Build package
        run: wasm-pack build -t nodejs
        working-directory: ./bindings/wasm
      - name: Install dependencies
        run: npm install
        working-directory: ./bindings/wasm
      - name: Run tests
        run: npm run test
        working-directory: ./bindings/wasm

  features:
    name: Check features
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: taiki-e/install-action@cargo-hack
      - run: cargo hack check --feature-powerset --lib
        working-directory: ./css-inline

  coverage:
    name: Code coverage
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: coverage-cargo-cache

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - uses: taiki-e/install-action@cargo-hack

      - uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Start background server
        run: |
          python -m pip install flask
          # Starts the server in background
          python ./css-inline/tests/server.py &

      - name: Run tests
        run: cargo hack llvm-cov --no-report
        working-directory: ./css-inline

      - name: Generate coverage reports
        run: cargo llvm-cov report --lcov --output-path lcov.info
        working-directory: ./css-inline

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: ${{ env.GITHUB_REPOSITORY }} == 'Stranger6667/css-inline'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: coverage
          files: lcov.info
          fail_ci_if_error: true

  fuzz:
    name: Fuzz
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
      - run: cargo install cargo-fuzz
      - run: cargo fuzz run inline -- -max_total_time=60
        working-directory: ./css-inline
