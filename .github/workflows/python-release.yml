name: Python Release

on:
  push:
    tags:
      - python-v*

jobs:
  wheels:
    name: "Create wheels for ${{ matrix.BUILD.NAME }}"
    runs-on: ${{ matrix.BUILD.OS }}
    strategy:
      fail-fast: false
      matrix:
        BUILD:
          - NAME: "Linux x86_64 manylinux"
            OS: "ubuntu-20.04"
            ARCH: "x86_64"
            CIBW_BUILD: "*-manylinux*"
            RUST_TOOLCHAIN: "x86_64-unknown-linux-gnu"
          - NAME: "Linux aarch64 manylinux"
            OS: "ubuntu-20.04"
            ARCH: "aarch64"
            CIBW_BUILD: "*-manylinux*"
            RUST_TOOLCHAIN: "aarch64-unknown-linux-gnu"
          - NAME: "Linux x86_64 musllinux"
            OS: "ubuntu-20.04"
            ARCH: "x86_64"
            CIBW_BUILD: "*-musllinux*"
            RUST_TOOLCHAIN: "x86_64-unknown-linux-musl"
          - NAME: "Linux aarch64 musllinux"
            OS: "ubuntu-20.04"
            ARCH: "aarch64"
            CIBW_BUILD: "*-musllinux*"
            RUST_TOOLCHAIN: "aarch64-unknown-linux-musl"
          - NAME: "macOS x86_64"
            OS: "macos-11"
            ARCH: "x86_64"
            RUST_TOOLCHAIN: "x86_64-apple-darwin"
          - NAME: "macOS arm64"
            OS: "macos-11"
            ARCH: "arm64"
            RUST_TOOLCHAIN: "aarch64-apple-darwin"
          - NAME: "Windows x86_64"
            OS: "windows-2019"
            ARCH: "AMD64"
            RUST_TOOLCHAIN: "x86_64-pc-windows-msvc"
          - NAME: "Windows i686"
            OS: "windows-2019"
            ARCH: "x86"
            RUST_TOOLCHAIN: "i686-pc-windows-msvc"
    env:
      # Install Rust toolchain inside the container
      CIBW_BEFORE_ALL: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -t ${{ matrix.BUILD.RUST_TOOLCHAIN }} -y --profile minimal"
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_BUILD: ${{ matrix.BUILD.CIBW_BUILD }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Setup QEMU
        # QEMU is needed for building aarch64 wheels on Linux
        if: ${{ matrix.BUILD.ARCH == 'aarch64' && runner.os == 'Linux' }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel bindings/python --output-dir wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.BUILD.ARCH }}
      - uses: actions/upload-artifact@v2
        with:
          name: Distribution Artifacts
          path: wheelhouse/*.whl

  sdist:
    name: Create sdist package
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Tox
        run: pip install tox
      - run: mkdir wheelhouse
      - name: Build sdist
        run: tox -e build-sdist && mv dist/css_inline-*.tar.gz ../../wheelhouse
        working-directory: ./bindings/python
      - uses: actions/upload-artifact@v2
        with:
          name: Distribution Artifacts
          path: wheelhouse/*.tar.gz

  upload_to_pypi:
    needs:
    - wheels
    - sdist
    name: Upload Artifacts to PyPi
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: Download Artifacts
        path: wheelhouse/
    - name: Publish distribution package to PyPI
      uses: pypa/gh-action-pypi-publish@v1
      with:
        user: ${{ secrets.PYPI_USERNAME }}
        password: ${{ secrets.PYPI_PASSWORD }}
        packages_dir: wheelhouse/
