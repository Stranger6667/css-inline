name: Python Release

on:
  push:
    tags:
      - python-v*

jobs:
  wheels:
    name: "Wheels for ${{ matrix.BUILD.NAME }}"
    runs-on: ${{ matrix.BUILD.OS }}
    strategy:
      fail-fast: false
      matrix:
        BUILD:
          - NAME: "Linux x86_64 manylinux"
            OS: "ubuntu-20.04"
            ARCH: "x86_64"
            CIBW_BUILD: "*-manylinux*"
            RUST_TOOLCHAIN: "x86_64-unknown-linux-gnu"
          - NAME: "Linux aarch64 manylinux"
            OS: "ubuntu-20.04"
            ARCH: "aarch64"
            CIBW_BUILD: "*-manylinux*"
            RUST_TOOLCHAIN: "aarch64-unknown-linux-gnu"
          - NAME: "Linux x86_64 musllinux"
            OS: "ubuntu-20.04"
            ARCH: "x86_64"
            CIBW_BUILD: "*-musllinux*"
            RUST_TOOLCHAIN: "x86_64-unknown-linux-musl"
          - NAME: "Linux aarch64 musllinux"
            OS: "ubuntu-20.04"
            ARCH: "aarch64"
            CIBW_BUILD: "*-musllinux*"
            RUST_TOOLCHAIN: "aarch64-unknown-linux-musl"
          - NAME: "macOS x86_64"
            OS: "macos-11"
            ARCH: "x86_64"
            RUST_TOOLCHAIN: "x86_64-apple-darwin"
          - NAME: "macOS arm64"
            OS: "macos-11"
            ARCH: "arm64"
            RUST_TOOLCHAIN: "aarch64-apple-darwin"
          - NAME: "Windows x86_64"
            OS: "windows-2019"
            ARCH: "AMD64"
            RUST_TOOLCHAIN: "x86_64-pc-windows-msvc"
          - NAME: "Windows i686"
            OS: "windows-2019"
            ARCH: "x86"
            RUST_TOOLCHAIN: "i686-pc-windows-msvc"
    env:
      # Install Rust toolchain inside the container
      CIBW_BEFORE_ALL: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -t ${{ matrix.BUILD.RUST_TOOLCHAIN }} -y --profile minimal"
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_BUILD: ${{ matrix.BUILD.CIBW_BUILD }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Setup QEMU
        # QEMU is needed for building aarch64 wheels on Linux
        if: ${{ matrix.BUILD.ARCH == 'aarch64' && runner.os == 'Linux' }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel bindings/python --output-dir wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.BUILD.ARCH }}
      - uses: actions/upload-artifact@v2
        with:
          name: Distribution Artifacts
          path: wheelhouse/*.whl

  wheels-macos-universal:
    # `cibuildwheel` does not support building CPython 3.7 wheels for macOS ARM64
    # This job build universal wheel that covers these versions.
    # Non-universal wheels are also in place, because they have smaller size & will be used in Python 3.8+ installations
    name: "Wheels for macOS universal2"
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        run: |
          curl "$PYTHON_DOWNLOAD_URL" -o python.pkg
          sudo installer -pkg python.pkg -target /
        env:
          PYTHON_DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.10.0/python-3.10.0post2-macos11.pkg'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          default: true
          target: aarch64-apple-darwin
      - run: /Library/Frameworks/Python.framework/Versions/3.10/bin/python3 -m venv venv
      - run: venv/bin/pip install -U pip wheel setuptools-rust
      - run: mkdir wheelhouse
      - name: Build the wheel
        run: |
          cd bindings/python && \
          ../../venv/bin/python setup.py bdist_wheel --py-limited-api=cp37 && \
          mv dist/css_inline*.whl ../../wheelhouse
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.10'
          ARCHFLAGS: '-arch x86_64 -arch arm64'
          _PYTHON_HOST_PLATFORM: 'macosx-10.9-universal2'
      - run: venv/bin/pip install -f wheelhouse --no-index css_inline
      - run: find venv/lib/*/site-packages/ -name 'css_inline*.so' -exec vtool -show {} \;
      - uses: actions/upload-artifact@v2
        with:
          name: Distribution Artifacts
          path: wheelhouse/*.whl

  sdist:
    name: Sdist package
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Tox
        run: pip install tox
      - run: mkdir wheelhouse
      - name: Build sdist
        run: tox -e build-sdist && mv dist/css_inline-*.tar.gz ../../wheelhouse
        working-directory: ./bindings/python
      - uses: actions/upload-artifact@v2
        with:
          name: Distribution Artifacts
          path: wheelhouse/*.tar.gz

  upload_to_pypi:
    needs:
    - wheels
    - wheels-macos-universal
    - sdist
    name: Upload Artifacts to PyPi
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: Distribution Artifacts
        path: wheelhouse/
    - name: Publish distribution package to PyPI
      uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        user: ${{ secrets.PYPI_USERNAME }}
        password: ${{ secrets.PYPI_PASSWORD }}
        packages_dir: wheelhouse/
