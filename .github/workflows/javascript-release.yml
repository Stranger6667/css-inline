name: "[JavaScript] Release"

on:
  push:
    tags:
      - javascript-v*

jobs:
  artifacts:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: macos-13
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              yarn build --target aarch64-apple-darwin
              strip -x *.node
          - host: windows-2022
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: windows-2022
            build: yarn build --target aarch64-pc-windows-msvc
            target: aarch64-pc-windows-msvc
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: set -e && yarn build && strip *.node
          - host: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              yarn build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-22.04
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              yarn build --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip *.node
          - host: ubuntu-22.04
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl &&
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node
          - host: ubuntu-22.04
            target: aarch64-linux-android
            build: |
              yarn build --target aarch64-linux-android
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - host: ubuntu-22.04
            target: armv7-linux-androideabi
            build: |
              yarn build --target armv7-linux-androideabi
              ${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node

    runs-on: ${{ matrix.settings.host }}
    env:
      DEBUG: napi:*
      APP_NAME: css-inline
      MACOSX_DEPLOYMENT_TARGET: "10.13"

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: bindings/javascript/yarn.lock

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.11.0

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Config yarn (x86_64-unknown-linux-musl)
        if: matrix.settings.target == 'x86_64-unknown-linux-musl'
        run: yarn config set supportedArchitectures.libc "musl"
        working-directory: bindings/javascript

      - name: Config yarn (aarch64-unknown-linux-gnu)
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
        working-directory: bindings/javascript

      - name: Config yarn (aarch64-unknown-linux-musl)
        if: matrix.settings.target == 'aarch64-unknown-linux-musl'
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "musl"
        working-directory: bindings/javascript

      - name: Config yarn (armv7-unknown-linux-gnueabihf)
        if: matrix.settings.target == 'armv7-unknown-linux-gnueabihf'
        run: yarn config set supportedArchitectures.cpu "arm"
        working-directory: bindings/javascript

      - name: Config yarn (aarch64-linux-android)
        if: matrix.settings.target == 'aarch64-linux-android'
        run: yarn config set supportedArchitectures.cpu "arm64"
        working-directory: bindings/javascript

      - name: Config yarn (aarch64-pc-windows-msvc)
        if: matrix.settings.target == 'aarch64-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "arm64"
        working-directory: bindings/javascript

      - name: Config yarn (armv7-linux-androideabi)
        if: matrix.settings.target == 'armv7-linux-androideabi'
        run: yarn config set supportedArchitectures.cpu "arm"
        working-directory: bindings/javascript

      - name: Install dependencies
        run: yarn install
        working-directory: bindings/javascript

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build/bindings/javascript"
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
        working-directory: bindings/javascript

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: bindings/javascript/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  artifacts-wasm:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: yarn
          cache-dependency-path: bindings/javascript/yarn.lock

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: bindings/javascript
          cache-all-crates: "true"

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Install dependencies
        run: yarn install
        working-directory: ./bindings/javascript

      - name: Build Wasm
        run: yarn build:wasm
        working-directory: ./bindings/javascript

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm32
          path: bindings/javascript/wasm/
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    needs:
      - artifacts
      - artifacts-wasm
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          cache: yarn
          cache-dependency-path: bindings/javascript/yarn.lock

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: npm-cache-ubuntu-22.04-release
          restore-keys: |
            npm-cache-

      - name: Install dependencies
        run: yarn install
        working-directory: bindings/javascript

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - run: mv -f ./artifacts ./bindings/javascript

      - name: Move Wasm artifacts
        run: mv -f ./bindings/javascript/artifacts/wasm32/ ./bindings/javascript/wasm-dist

      - name: Move Node.js artifacts
        run: yarn artifacts
        working-directory: bindings/javascript

      - name: Publish to npm packages
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" >> ~/.npmrc
          npm publish --access public --provenance
          cd wasm-dist
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        working-directory: bindings/javascript
